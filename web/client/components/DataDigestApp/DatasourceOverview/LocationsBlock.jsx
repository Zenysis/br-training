// @flow
import * as React from 'react';

import Alert from 'components/ui/Alert';
import AnimateHeight from 'components/ui/AnimateHeight';
import Group from 'components/ui/Group';
import Heading from 'components/ui/Heading';
import Icon from 'components/ui/Icon';
import InputText from 'components/ui/InputText';
import LoadingSpinner from 'components/ui/LoadingSpinner';
import LocationsDigestData from 'models/DataDigestApp/LocationsDigestData';
import Table from 'components/ui/Table';
import Tag from 'components/ui/Tag';
import Tooltip from 'components/ui/Tooltip';
import useLocationDigestTable from 'components/DataDigestApp/DatasourceOverview/useLocationDigestTable';
import useToggleBoolean from 'lib/hooks/useToggleBoolean';

const locationDescriptions = {
  mapped:
    'These are all the locations that were successfully matched in our pipeline. This means that the raw location coming from the source data correctly found a match in our canonical mappings file. Go to the Mapping Files tab to view the canonical mappings files.',
  unmatched:
    'These are all the locations that could not get matched in our pipeline. This means that the raw location coming from the source data could not find a match in our canonical mappings file. Go to the Mapping Files tab to view the canonical mappings files.',
};

type Props = {
  isLoadingLocationData: boolean,
  locationsData: LocationsDigestData | void,
  locationType: 'mapped' | 'unmatched',
};

export default function LocationsBlock({
  isLoadingLocationData,
  locationType,
  locationsData,
}: Props): React.Node {
  const [searchText, setSearchText] = React.useState('');
  const [
    tableHeaders,
    tableData,
    renderTableRow,
    downloadDataFn,
  ] = useLocationDigestTable(locationsData);

  const [showTable, toggleShowTable] = useToggleBoolean(true);

  const renderTable = () => {
    if (isLoadingLocationData) {
      return <LoadingSpinner />;
    }

    if (!locationsData) {
      return (
        <Alert
          intent="error"
          title={
            <p>
              <b>{`No ${locationType} locations report found`}</b>
            </p>
          }
        >
          <p>
            {`This datasource does not have a ${locationType} locations report generated by
            the pipeline.`}
          </p>
        </Alert>
      );
    }

    return (
      <div className="dd-table-container">
        <Table
          className="dd-table-container__table"
          data={tableData}
          headers={tableHeaders}
          initialColumnToSort={tableHeaders[0].id}
          pageSize={10}
          renderRow={renderTableRow}
          searchText={searchText}
        />
      </div>
    );
  };

  return (
    <Group.Vertical spacing="l">
      <Group.Horizontal alignItems="center" flex>
        <Icon
          onClick={toggleShowTable}
          type={showTable ? 'svg-caret-down' : 'svg-caret-right'}
        />
        <Heading.Medium>{`${locationType} locations`}</Heading.Medium>
        {locationsData ? (
          <Tag.Simple intent={Tag.Intents.INFO}>{tableData.length}</Tag.Simple>
        ) : null}
      </Group.Horizontal>
      <AnimateHeight height={showTable ? 'auto' : 0}>
        <Group.Horizontal>
          <InputText
            icon="search"
            onChange={setSearchText}
            placeholder="Search table"
            value={searchText}
          />
          <Tooltip content={`Download ${locationType} location data to Excel`}>
            <Icon
              ariaName={`download ${locationType} locations`}
              onClick={() =>
                downloadDataFn(`${locationType} locations`, tableData)
              }
              type="download-alt"
            />
          </Tooltip>
        </Group.Horizontal>
        <p>{locationDescriptions[locationType]}</p>
        {renderTable()}
      </AnimateHeight>
    </Group.Vertical>
  );
}
